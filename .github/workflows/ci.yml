on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  format:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-elixir@v1
        with:
          otp-version: '22.3.2'
          elixir-version: '1.10.3'
      - uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-hex-${{ hashFiles('mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-hex-
      - run: mix deps.get
      - run: mix format --check-formatted

  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:12.2
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-elixir@v1
        with:
          otp-version: '22.3.2'
          elixir-version: '1.10.3'
      - uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-hex-${{ hashFiles('mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-hex-
      - uses: actions/cache@v2
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ hashFiles('lib/**') }}
          restore-keys: |
            ${{ runner.os }}-build-
      - run: mix deps.get
      - run: mix test

  release:
    runs-on: ubuntu-latest

    needs:
      - format
      - test

    if: github.ref == 'refs/heads/dev'

    outputs:
      result: ${{ steps.push.conclusion }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: erlef/setup-elixir@v1
        with:
          otp-version: '22.3.2'
          elixir-version: '1.10.3'
      - id: latest
        run: echo "::set-output name=version::`mix run -e 'IO.puts Mix.Project.config[:version]' --no-archives-check --no-deps-check --no-compile --no-start`"
      - run: git fetch && git checkout master
      - id: current
        run: echo "::set-output name=version::`mix run -e 'IO.puts Mix.Project.config[:version]' --no-archives-check --no-deps-check --no-compile --no-start`"
      - if: steps.latest.outputs.version != steps.current.outputs.version
        id: push
        run: git merge dev && git push

  deploy:
    runs-on: ubuntu-latest

    needs:
      - release

    if: needs.release.outputs.result == 'success'

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master
      - uses: actions/setup-python@v2
        with:
          python-version: '3'
      - run: pip install gigalixir --ignore-installed six
      - run: gigalixir login -y -e '${{ secrets.GIGALIXIR_EMAIL }}' -p '${{ secrets.GIGALIXIR_PASSWORD }}'
      - run: gigalixir git:remote ${{ secrets.GIGALIXIR_APPNAME }}
      - run: 'git -c http.extraheader="GIGALIXIR-HOT: true" push gigalixir'
